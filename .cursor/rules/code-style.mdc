---
alwaysApply: true
description: Code style, naming, safety, and testing guidance
---

# Code Style & Safety - Main Guidelines

This rule file has been broken down into more specific, focused rules for better organization and easier reference. See the individual rules below for detailed guidelines:

## Focused Rules Created

### [naming-conventions.mdc](mdc:.cursor/rules/naming-conventions.mdc)
- Variable and function naming conventions
- API design principles
- Code readability standards

### [immutability-safety.mdc](mdc:.cursor/rules/immutability-safety.mdc)
- Immutable data structures and records
- Defensive programming practices
- Data structure safety guidelines

### [concurrency-safety.mdc](mdc:.cursor/rules/concurrency-safety.mdc)
- Error handling with guard clauses
- Control flow and complexity management
- Threading and synchronization guidelines

### [documentation-comments.mdc](mdc:.cursor/rules/documentation-comments.mdc)
- Comment philosophy and best practices
- JavaDoc standards and examples
- Documentation maintenance guidelines

### [testing-ci.mdc](mdc:.cursor/rules/testing-ci.mdc)
- Testing philosophy and categories
- CI/CD best practices
- Test organization and debugging

### [licensing-headers.mdc](mdc:.cursor/rules/licensing-headers.mdc)
- SPDX header requirements and formats
- Licensing areas and file type rules
- License compliance and maintenance

## Quick Reference

For immediate code style questions, refer to the specific focused rules above. Each rule provides detailed examples and implementation guidance for its area of concern.

## Legacy Content (for reference)

- Naming & clarity: Prefer descriptive, full-word names; avoid 1â€“2 letter variables.
- Functions are verbs; variables are nouns.
- Keep public APIs explicitly typed.

- Immutability & Java 24: Favor immutable data structures and records; prefer unmodifiable collections.
- Prefer `java.util` concurrent-safe collections where needed; avoid shared mutable state.

- Concurrency & safety: Use guard clauses and early returns; handle error/edge cases first.
- Avoid deep nesting; keep cyclomatic complexity low.
- When in doubt on threading or memory safety, prefer simple, scoped synchronization and document invariants.

- Comments & docs: Comment the "why," not the obvious "how." Keep comments short.
- Update [internal/NOTATION.md](mdc:internal/NOTATION.md) if you add/rename metrics or JSON keys.

- Testing & CI: Run [scripts/test_qualia.sh](mdc:scripts/test_qualia.sh) before committing engine changes.
- Keep CI green via [scripts/ci.sh](mdc:scripts/ci.sh).

- Licensing headers: Add correct SPDX headers per area (see licensing rule). Never use CC0 for code.

