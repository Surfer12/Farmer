---
alwaysApply: true
---
# Project structure guide

Main entrypoints and where things live:

- Demos/CLI: [Corpus/qualia/Core.java](mdc:Corpus/qualia/Core.java)
  - Subcommands: `hmc`, `hmc_adapt`, `hmcmulti`, `rmala`, `stein`, `mcda`, `unified`, `bifurc`.

- Core Bayesian model: [Corpus/qualia/HierarchicalBayesianModel.java](mdc:Corpus/qualia/HierarchicalBayesianModel.java)
  - Prepared fast-path: inner `Prepared` dataset; use `precompute(...)` and `logPosteriorPrepared(...)`.
  - Analytic gradients: `gradientLogPosteriorPrepared(...)`, `gradLogTargetZ(...)`.

- Samplers:
  - HMC: [Corpus/qualia/HmcSampler.java](mdc:Corpus/qualia/HmcSampler.java)
  - RMALA: [Corpus/qualia/RmalaSampler.java](mdc:Corpus/qualia/RmalaSampler.java)
  - Stein gradients: [Corpus/qualia/SteinGradLogP.java](mdc:Corpus/qualia/SteinGradLogP.java)
  - Multi-chain orchestration: [Corpus/qualia/HmcMultiChainRunner.java](mdc:Corpus/qualia/HmcMultiChainRunner.java)

- Unified detector (triad gating): [Corpus/qualia/UnifiedDetector.java](mdc:Corpus/qualia/UnifiedDetector.java)
  - JSONL writer in: `unified` mode of [Corpus/qualia/Core.java](mdc:Corpus/qualia/Core.java)
  - Bifurcation sweeps: [Corpus/qualia/BifurcationSweep.java](mdc:Corpus/qualia/BifurcationSweep.java)

- Notation and key naming: [internal/NOTATION.md](mdc:internal/NOTATION.md)

- Status updates: directory [internal/StatusUpdate/](mdc:internal/StatusUpdate/)
  - Canonical log: [internal/StatusUpdate/status.jsonl](mdc:internal/StatusUpdate/status.jsonl)
  - Schema: [internal/StatusUpdate/status.schema.json](mdc:internal/StatusUpdate/status.schema.json)
  - Template: [internal/StatusUpdate/STATUS_UPDATE_TEMPLATE.md](mdc:internal/StatusUpdate/STATUS_UPDATE_TEMPLATE.md)

- Licensing/REUSE:
  - Public license text: [LICENSES/GPL-3.0-only.txt](mdc:LICENSES/GPL-3.0-only.txt)
  - Internal-use license: [LICENSES/LicenseRef-Internal-Use-Only.txt](mdc:LICENSES/LicenseRef-Internal-Use-Only.txt)
  - Policy explainer: [internal/psi-licensing.tex](mdc:internal/psi-licensing.tex)
  - REUSE config: [REUSE.toml](mdc:REUSE.toml)

---
alwaysApply: true
---
# Project Structure Guide

Core areas and entry points:

- Java (Ψ core): [Corpus/qualia](mdc:Corpus/qualia)
  - CLI entry: [Core.java](mdc:Corpus/qualia/Core.java)
  - HMC: [HmcSampler.java](mdc:Corpus/qualia/HmcSampler.java)
  - MCDA: [Mcda.java](mdc:Corpus/qualia/Mcda.java)

- Swift (UOIF):
  - CLI: [Sources/UOIFCLI/main.swift](mdc:Sources/UOIFCLI/main.swift)
  - Core: [Sources/UOIFCore](mdc:Sources/UOIFCore)

- iOS app (Farmer):
  - App entry: [Farmer/FarmerApp.swift](mdc:Farmer/FarmerApp.swift)

- Governance & Docs:
  - Internal TODO: [internal/qualia/TODO.md](mdc:internal/qualia/TODO.md)
  - Licensing explainer: [internal/psi-licensing.tex](mdc:internal/psi-licensing.tex)
  - REUSE/License texts: [REUSE.toml](mdc:REUSE.toml), [LICENSES/GPL-3.0-only.txt](mdc:LICENSES/GPL-3.0-only.txt), [LICENSES/LicenseRef-Internal-Use-Only.txt](mdc:LICENSES/LicenseRef-Internal-Use-Only.txt)

- Status & Ops:
  - Status log: [internal/StatusUpdate/status.jsonl](mdc:internal/StatusUpdate/status.jsonl)
  - Status schema: [internal/StatusUpdate/status.schema.json](mdc:internal/StatusUpdate/status.schema.json)
  - Summary script: [scripts/status_summary.sh](mdc:scripts/status_summary.sh)

Java build/run tips:
- Source root for Ψ Java is `Corpus/qualia` (package `qualia`).
- Classes are typically output to `out-qualia/` and run via `qualia.Core`.
---
alwaysApply: true
---
# Project Structure and Entrypoints

- Core entrypoint: [Core.java](mdc:Corpus/qualia/Core.java)
  - Modes: `console`, `file`, `jdbc`, `stein`, `hmc`, `hmc_adapt`, `hmcmulti`, `unified`, `bifurc`, `mcda`, `rmala`.
  - Build: `javac -d out-qualia Corpus/qualia/*.java`
  - Run example (multi-chain): `java -cp out-qualia qualia.Core hmcmulti chains=2 warmup=300 iters=600 thin=2 eps=0.02 leap=16 target=0.75 out=hmc-smoke`

- HMC sampler and multi-chain:
  - [HmcSampler.java](mdc:Corpus/qualia/HmcSampler.java)
  - [HmcMultiChainRunner.java](mdc:Corpus/qualia/HmcMultiChainRunner.java)

- Triad detector (RK4/Taylor/Geometry):
  - [UnifiedDetector.java](mdc:Corpus/qualia/UnifiedDetector.java)
  - Run via `unified` mode in [Core.java](mdc:Corpus/qualia/Core.java) (writes JSONL).

- Canonical dynamics sweeps:
  - [BifurcationSweep.java](mdc:Corpus/qualia/BifurcationSweep.java)
  - Run via `bifurc` mode in [Core.java](mdc:Corpus/qualia/Core.java) (`kind=logistic|saddle|hopf`).

- MCDA public API and demo:
  - [Mcda.java](mdc:Corpus/qualia/Mcda.java)
  - Run via `mcda` mode in [Core.java](mdc:Corpus/qualia/Core.java).

- DI and sinks:
  - [ServiceLocator.java](mdc:Corpus/qualia/ServiceLocator.java)
  - Sinks: [FileAuditSink.java](mdc:Corpus/qualia/FileAuditSink.java), [HttpAuditSink.java](mdc:Corpus/qualia/HttpAuditSink.java), [JdbcAuditSink.java](mdc:Corpus/qualia/JdbcAuditSink.java)

- Metrics and status:
  - Prometheus: [MetricsServer.java](mdc:Corpus/qualia/MetricsServer.java)
  - Status: [status.jsonl](mdc:internal/StatusUpdate/status.jsonl), template [STATUS_UPDATE_TEMPLATE.md](mdc:internal/StatusUpdate/STATUS_UPDATE_TEMPLATE.md)

- Notation and TODOs:
  - [internal/NOTATION.md](mdc:internal/NOTATION.md)
  - [internal/qualia/TODO.md](mdc:internal/qualia/TODO.md)

