import SwiftUI
import Charts

struct PerformanceDetailView: View {
    @ObservedObject var viewModel: FinViewModel
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 24) {
                    // Performance Overview
                    performanceOverviewSection
                    
                    // Detailed Metrics
                    detailedMetricsSection
                    
                    // Performance Analysis
                    performanceAnalysisSection
                    
                    // Historical Data
                    historicalDataSection
                    
                    Spacer(minLength: 20)
                }
                .padding(.horizontal)
            }
            .navigationTitle("Performance Details")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Done") {
                        dismiss()
                    }
                }
            }
        }
    }
    
    // MARK: - Performance Overview Section
    
    private var performanceOverviewSection: some View {
        VStack(spacing: 16) {
            Text("Performance Overview")
                .font(.headline)
                .frame(maxWidth: .infinity, alignment: .leading)
            
            let metrics = viewModel.getPerformanceMetrics()
            
            VStack(spacing: 12) {
                HStack {
                    Text("Efficiency Score")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                    Spacer()
                    Text("\(String(format: "%.1f", metrics.efficiency * 100))%")
                        .font(.title2)
                        .fontWeight(.bold)
                        .foregroundColor(.green)
                }
                
                ProgressView(value: metrics.efficiency)
                    .progressViewStyle(LinearProgressViewStyle(tint: .green))
                
                HStack {
                    Text("Flow State")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                    Spacer()
                    Text(metrics.flowState.rawValue)
                        .font(.subheadline)
                        .foregroundColor(metrics.flowState.color)
                }
                
                HStack {
                    Text("Prediction Confidence")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                    Spacer()
                    Text("\(String(format: "%.0f", metrics.confidence * 100))%")
                        .font(.subheadline)
                        .foregroundColor(.blue)
                }
            }
            .padding()
            .background(Color(.systemBackground))
            .cornerRadius(10)
        }
    }
    
    // MARK: - Detailed Metrics Section
    
    private var detailedMetricsSection: some View {
        VStack(spacing: 16) {
            Text("Detailed Metrics")
                .font(.headline)
                .frame(maxWidth: .infinity, alignment: .leading)
            
            LazyVGrid(columns: [
                GridItem(.flexible()),
                GridItem(.flexible())
            ], spacing: 16) {
                DetailMetricCard(
                    title: "Lift Force",
                    value: viewModel.liftDrag?.lift ?? 0,
                    unit: "N",
                    description: "Vertical force generated by fins",
                    color: .green
                )
                
                DetailMetricCard(
                    title: "Drag Force",
                    value: viewModel.liftDrag?.drag ?? 0,
                    unit: "N",
                    description: "Resistance force against water",
                    color: .red
                )
                
                DetailMetricCard(
                    title: "Lift/Drag Ratio",
                    value: viewModel.liftDrag.map { $0.lift / max($0.drag, 0.1) } ?? 0,
                    unit: "",
                    description: "Aerodynamic efficiency metric",
                    color: .blue
                )
                
                DetailMetricCard(
                    title: "Turn Angle",
                    value: viewModel.turnAngle,
                    unit: "°",
                    description: "Current angle of attack",
                    color: .orange
                )
            }
        }
    }
    
    // MARK: - Performance Analysis Section
    
    private var performanceAnalysisSection: some View {
        VStack(spacing: 16) {
            Text("Performance Analysis")
                .font(.headline)
                .frame(maxWidth: .infinity, alignment: .leading)
            
            VStack(spacing: 12) {
                let metrics = viewModel.getPerformanceMetrics()
                
                AnalysisRow(
                    title: "Pressure Distribution",
                    value: metrics.averagePressure,
                    unit: "avg",
                    range: metrics.pressureRange,
                    description: "Pressure variation across fin surfaces"
                )
                
                AnalysisRow(
                    title: "Aerodynamic Efficiency",
                    value: metrics.liftToDragRatio,
                    unit: "L/D",
                    range: nil,
                    description: "Lift generation vs. drag resistance"
                )
                
                AnalysisRow(
                    title: "Cognitive Load",
                    value: metrics.cognitiveLoad,
                    unit: "score",
                    range: nil,
                    description: "Mental effort required for current performance"
                )
            }
            .padding()
            .background(Color(.systemBackground))
            .cornerRadius(10)
        }
    }
    
    // MARK: - Historical Data Section
    
    private var historicalDataSection: some View {
        VStack(spacing: 16) {
            Text("Performance Trends")
                .font(.headline)
                .frame(maxWidth: .infinity, alignment: .leading)
            
            VStack(spacing: 12) {
                Text("Real-time performance monitoring shows:")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                
                VStack(alignment: .leading, spacing: 8) {
                    TrendBullet(
                        text: "Optimal performance at 0-5° turn angles",
                        color: .green
                    )
                    TrendBullet(
                        text: "Efficiency peaks with 12% lift increase on raked fins",
                        color: .blue
                    )
                    TrendBullet(
                        text: "Pressure differential of 30% indicates good flow separation",
                        color: .orange
                    )
                    TrendBullet(
                        text: "Cognitive load correlates with pressure complexity",
                        color: .purple
                    )
                }
            }
            .padding()
            .background(Color(.systemBackground))
            .cornerRadius(10)
        }
    }
}

// MARK: - Supporting Views

struct DetailMetricCard: View {
    let title: String
    let value: Float
    let unit: String
    let description: String
    let color: Color
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text(title)
                .font(.headline)
                .foregroundColor(color)
            
            HStack(alignment: .bottom, spacing: 4) {
                Text("\(value, specifier: "%.2f")")
                    .font(.title)
                    .fontWeight(.bold)
                    .foregroundColor(color)
                
                Text(unit)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Text(description)
                .font(.caption)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.leading)
        }
        .frame(maxWidth: .infinity, alignment: .leading)
        .padding()
        .background(Color(.systemBackground))
        .cornerRadius(10)
        .shadow(radius: 2)
    }
}

struct AnalysisRow: View {
    let title: String
    let value: Double
    let unit: String
    let range: Double?
    let description: String
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            HStack {
                Text(title)
                    .font(.subheadline)
                    .fontWeight(.medium)
                Spacer()
                HStack(alignment: .bottom, spacing: 4) {
                    Text("\(value, specifier: "%.2f")")
                        .font(.title3)
                        .fontWeight(.bold)
                    Text(unit)
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
            }
            
            if let range = range {
                HStack {
                    Text("Range: \(range, specifier: "%.3f")")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    Spacer()
                }
            }
            
            Text(description)
                .font(.caption)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.leading)
        }
        .padding(.vertical, 4)
    }
}

struct TrendBullet: View {
    let text: String
    let color: Color
    
    var body: some View {
        HStack(alignment: .top, spacing: 8) {
            Circle()
                .fill(color)
                .frame(width: 6, height: 6)
                .padding(.top, 6)
            
            Text(text)
                .font(.caption)
                .foregroundColor(.primary)
                .multilineTextAlignment(.leading)
        }
    }
}

struct PerformanceDetailView_Previews: PreviewProvider {
    static var previews: some View {
        PerformanceDetailView(viewModel: FinViewModel())
    }
}